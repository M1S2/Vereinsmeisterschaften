<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TooltipRaceVariantIsPersistentToggleButton" xml:space="preserve">
    <value>Enable this to persist this variant to a file. Only one variant can be marked as persistent at a time.</value>
  </data>
  <data name="TooltipRaceVariantKeepWhileCalculationToggleButton" xml:space="preserve">
    <value>Enable this to keep this variant while calculating new race variants.</value>
  </data>
  <data name="TooltipRaceVariantIsPersistentIcon" xml:space="preserve">
    <value>Persist this variant to a file. Only one variant can be marked as persistent at a time.</value>
  </data>
  <data name="TooltipRaceVariantKeepWhileCalculation" xml:space="preserve">
    <value>Keep this variant while calculating new race variants.</value>
  </data>
  <data name="TooltipRaceVariantContainsError" xml:space="preserve">
    <value>This variant contains errors.</value>
  </data>
  <data name="TooltipNumberOfSwimLanes" xml:space="preserve">
    <value>Number of available swim lanes.
This is used during calculation of the race variants (determines the maximum number of parallel starts).</value>
  </data>
  <data name="TooltipNumberRacesVariantsAfterCalculation" xml:space="preserve">
    <value>Number of variants after calculation.
The number of variants to keep (marked with the pin icon) is subtracted before calculating the remaining elements.</value>
  </data>
  <data name="TooltipMaxRacesVariantCalculationLoops" xml:space="preserve">
    <value>Maximum number of iterations the race variant calculation loop will run in the worst case.
If the number of variants after calculation is reached earlier, the loop will break.</value>
  </data>
  <data name="TooltipMinRacesVariantsScore" xml:space="preserve">
    <value>Only variants with a score higher or equal this value (in percent) are kept during calculation.</value>
  </data>
  <data name="TooltipCompetitionYear" xml:space="preserve">
    <value>Year in which the competition takes place.
This year is used to find the correct competition for each start.</value>
  </data>
  <data name="TooltipTemplatePathCertificate" xml:space="preserve">
    <value>Path to the certificate template.</value>
  </data>
  <data name="TooltipDocumentOutputFolder" xml:space="preserve">
    <value>Output folder where the documents are created.</value>
  </data>
  <data name="TooltipTemplatePathOverviewList" xml:space="preserve">
    <value>Path to the overview list template.</value>
  </data>
  <data name="TooltipLibreOfficePath" xml:space="preserve">
    <value>Path to the LibreOffice soffice.exe used for PDF conversion.</value>
  </data>
  <data name="TooltipTemplatePathRaceStartList" xml:space="preserve">
    <value>Path to the race start list template.</value>
  </data>
  <data name="TooltipTemplatePathResultList" xml:space="preserve">
    <value>Path to the result list template.</value>
  </data>
  <data name="TooltipTemplatePathTimeForms" xml:space="preserve">
    <value>Path to the time forms template.</value>
  </data>
  <data name="TooltipWorkspaceOpen" xml:space="preserve">
    <value>Open a workspace and load all settings, persons, competitions...</value>
  </data>
  <data name="TooltipWorkspaceOpenInExplorer" xml:space="preserve">
    <value>Open the folder of the current workspace in the windows explorer.</value>
  </data>
  <data name="TooltipWorkspaceSave" xml:space="preserve">
    <value>Save all workspace settings, persons, competitions, ... to a file.</value>
  </data>
  <data name="TooltipWorkspaceClose" xml:space="preserve">
    <value>Close the current workspace. If there are unsaved changes, there will be a dialog before closing.</value>
  </data>
  <data name="TooltipTemplatePathResultListDetail" xml:space="preserve">
    <value>Path to the result list detail template.</value>
  </data>
  <data name="TooltipPlaceholderMarker" xml:space="preserve">
    <value>String marker for placeholders in the template files. The placeholder must be enclosed by this marker.
e.g. PlaceholderMarker = "%" --&gt; %PLACEHOLDER%</value>
  </data>
  <data name="TooltipDocumentFileTypes" xml:space="preserve">
    <value>File types of documents that will be created.</value>
  </data>
  <data name="TooltipTemplateFilenamePostfix" xml:space="preserve">
    <value>This string is removed from the template file name to get the final output file name.
If filters are used during document creation, this string defines the place where the filter criteria are inserted in the output file name.

e.g. Template File: "Certificates_Template.docx",
Template Postfix: "_Template"
-&gt; Output file (without filters): "Certificates.docx"
-&gt; Output file (with filters by style): "Certificates_Breaststroke.docx"</value>
  </data>
  <data name="TooltipWeightSingleStarts" xml:space="preserve">
    <value>Weight for the score for single starts (The less races with only one start the better).</value>
  </data>
  <data name="TooltipWeightSameStyleSequence" xml:space="preserve">
    <value>Weight for the score for same styles in sequence (The more consecutive races with the same style the better).</value>
  </data>
  <data name="TooltipWeightPersonStartPauses" xml:space="preserve">
    <value>Weight for the score for person pauses (The more pause between the starts of a person the better).</value>
  </data>
  <data name="TooltipWeightStyleOrder" xml:space="preserve">
    <value>Weight for the score for style order (There is a preferred order for the styles. The more the races follow this order, the better.).</value>
  </data>
  <data name="TooltipWeightStartGenders" xml:space="preserve">
    <value>Weight for the score for start genders (Homogenous genders in starts are better than heterogeneous ones).</value>
  </data>
  <data name="TooltipPriorityStyleBreaststroke" xml:space="preserve">
    <value>Priority used for style breaststroke during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipPriorityStyleFreestyle" xml:space="preserve">
    <value>Priority used for style breaststroke during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipPriorityStyleBackstroke" xml:space="preserve">
    <value>Priority used for style backstroke during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipPriorityStyleButterfly" xml:space="preserve">
    <value>Priority used for style butterfly during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipPriorityStyleMedley" xml:space="preserve">
    <value>Priority used for style medley during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipPriorityStyleWaterflea" xml:space="preserve">
    <value>Priority used for style waterflea during score calculation (step style order).
Lower numbers should start earlier.</value>
  </data>
  <data name="TooltipBrowse" xml:space="preserve">
    <value>Browse for file or folder.</value>
  </data>
  <data name="TooltipShowResolvedPath" xml:space="preserve">
    <value>Show resolved path</value>
  </data>
  <data name="TooltipHideResolvedPath" xml:space="preserve">
    <value>Hide resolved path</value>
  </data>
  <data name="TooltipTimeInputMillisecondDigits" xml:space="preserve">
    <value>Number of digits for the time input Millisecond.</value>
  </data>
  <data name="TooltipScoreFractionalDigits" xml:space="preserve">
    <value>Number of fractional digits to use for the score.
The score is directly rounded while calculation, so that all occurences use the same number of digits.</value>
  </data>
  <data name="TooltipOpenDocument" xml:space="preserve">
    <value>Open document in default application. Open .pdf if available, otherwise use .docx.</value>
  </data>
  <data name="TooltipMaxAgeCompetition" xml:space="preserve">
    <value>This start is using a competition that was selected, because the person is older than all available competitions for this style and gender.
The competition with the highest age is used then.</value>
  </data>
  <data name="TooltipPageInfoWorkspacePage" xml:space="preserve">
    <value>The workspace is a folder where all settings, competitions, and people are saved. It's a good idea to create a new folder for each competition (e.g. each year). It doesn't matter where the folder is located on the hard drive.

The following files are created:
- WorkspaceSettings.json: JSON file with all settings for the workspace.
- Person.csv: List of all people and swim times.
- Competitions.csv: List of all available competitions.
- BestRace.csv: The race marked as a good option is saved here. If no race has been marked, this file doesn't exist.
Of course, other files can be stored here (e.g. templates).

On this page, you can select the current workspace folder and save all changes. Furthermore, all settings for various aspects of the software can be configured and reset here.</value>
  </data>
  <data name="TooltipPageInfoCompetitionPage" xml:space="preserve">
    <value>All available competitions are defined on this page.
A competition is described by the style, the distance, the age, and a corresponding time. The time is then used to calculate points.
If the swimmer achieves exactly the time entered here, they receive 100 points.
If they swim slower, they receive fewer points; if they swim faster, they receive more.
A corresponding competition must be available for each start.</value>
  </data>
  <data name="TooltipPageInfoPeoplePage" xml:space="preserve">
    <value>All entries can be entered on this page.
The registration requires the name, year of birth, and the desired style.
A corresponding competition must also be entered for each style! Otherwise, the start will be ignored (also highlighted here).</value>
  </data>
  <data name="TooltipPageInfoPrepareRacesPage" xml:space="preserve">
    <value>On this page, you can create a order for the starts. This can be done either manually (by adding a variant and manually dragging the starts from the right area to the middle) or automatically (variants are randomly created and evaluated according to various criteria).
Each race variant is scored from 0% (poor) to 100% (perfect). In the workspace, you can set the weighting or various parameters for the automatic calculation.
You can also highlight specific starts. For example, all of a person's starts to check whether there are enough breaks.</value>
  </data>
  <data name="TooltipPageInfoTimeInputPage" xml:space="preserve">
    <value>For each start, you can enter the swim time here (in minutes, seconds, and tenths of a second).
Various filter options are available.</value>
  </data>
  <data name="TooltipPageInfoResultsPage" xml:space="preserve">
    <value>This page displays the results from all starts (the number of points awarded for each swim time).
It is also possible to determine the best swimmers in a particular style.</value>
  </data>
  <data name="TooltipPageInfoCreateDocumentsPage" xml:space="preserve">
    <value>On this page, you can create various documents that are required before, during, or after the competition. The filter only applies to certificate creation.
It also provides an overview of all available placeholders that can be used in the documents.</value>
  </data>
  <data name="TooltipCompetitionDate" xml:space="preserve">
    <value>Complete date on which the competition takes place.
This is only used during document creation as info text.</value>
  </data>
  <data name="TooltipNotExactAgeCompetition" xml:space="preserve">
    <value>This start is using a competition that was selected, because there was no available competition for this style and gender with the exact age of the person.</value>
  </data>
  <data name="TooltipCompetitionSearchMode" xml:space="preserve">
    <value>Search mode that defines how the correct competition for a start is found.</value>
  </data>
  <data name="TooltipPersonActiveInactiveButton" xml:space="preserve">
    <value>Set all starts of the person to active or inactive.</value>
  </data>
  <data name="TooltipPersonInactiveStart" xml:space="preserve">
    <value>This start of the person is inactive.</value>
  </data>
  <data name="TooltipNoTimeSet" xml:space="preserve">
    <value>No time was set yet (time is zero).</value>
  </data>
  <data name="TooltipDuplicatePerson" xml:space="preserve">
    <value>There was at least one other person with the same basic parameters found.</value>
  </data>
  <data name="TooltipEmptyPerson" xml:space="preserve">
    <value>This person has no starts.</value>
  </data>
  <data name="TooltipPersonInactive" xml:space="preserve">
    <value>This person is inactive.</value>
  </data>
</root>